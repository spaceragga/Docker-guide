services:
  mongo:
    image: mongo:7
    container_name: stage7-mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    volumes:
      - mongo_data:/data/db
    networks:
      - internal
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping').ok"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  api:
    build: ./api
    image: stage7-node-api:latest
    container_name: stage7-node-api
    ports:
      - "3000:3000"
    env_file:
      - ./api/env.example
    environment:
      - NODE_ENV=production
    depends_on:
      mongo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "scripts/healthcheck.js"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - internal
      - edge

  web:
    build: ./web
    image: stage7-web:latest
    container_name: stage7-web
    ports:
      - "3001:3000"
    env_file:
      - ./web/env.example
    depends_on:
      - api
    networks:
      - edge

  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: stage7-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - edge
      - internal

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: stage7-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - internal

  grafana:
    image: grafana/grafana:10.4.5
    container_name: stage7-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - edge

  dozzle:
    image: amir20/dozzle:v6.4.6
    container_name: stage7-dozzle
    ports:
      - "9999:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - edge

networks:
  internal:
    internal: true
  edge:
    driver: bridge

volumes:
  mongo_data:


